﻿@model IDictionary<string, string>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="icon" type="image/png" href="images/favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="images/favicon-16x16.png" sizes="16x16" />
    <link href='css/typography.css' media='screen' rel='stylesheet' type='text/css' />
    <link href='css/reset.css' media='screen' rel='stylesheet' type='text/css' />
    <link href='css/screen.css' media='screen' rel='stylesheet' type='text/css' />
    <link href='css/reset.css' media='print' rel='stylesheet' type='text/css' />
    <link href='css/print.css' media='print' rel='stylesheet' type='text/css' />
    <script src='lib/jquery-1.8.0.min.js' type='text/javascript'></script>
    <script src='lib/jquery.slideto.min.js' type='text/javascript'></script>
    <script src='lib/jquery.wiggle.min.js' type='text/javascript'></script>
    <script src='lib/jquery.ba-bbq.min.js' type='text/javascript'></script>
    <script src='lib/handlebars-2.0.0.js' type='text/javascript'></script>
    <script src='lib/underscore-min.js' type='text/javascript'></script>
    <script src='lib/backbone-min.js' type='text/javascript'></script>
    <script src='swagger-ui.js' type='text/javascript'></script>
    <script src='lib/highlight.7.3.pack.js' type='text/javascript'></script>
    <script src='lib/jsoneditor.min.js' type='text/javascript'></script>
    <script src='lib/marked.js' type='text/javascript'></script>
    <!--
    <script src='lib/swagger-oauth.js' type='text/javascript'></script>
    -->
    <script type="text/javascript">
        var appName;
        var popupMask;
        var popupDialog;
        var clientId;
        var realm;
        var oauth2KeyName;
        var redirect_uri;
        var clientSecret;
        var scopeSeparator;

        function handleLogin() {
            var scopes = [];

            var auths = window.swaggerUi.api.authSchemes || window.swaggerUi.api.securityDefinitions;
            if (auths) {
                var key;
                var defs = auths;
                for (key in defs) {
                    var auth = defs[key];
                    if (auth.type === 'oauth2' && auth.scopes) {
                        oauth2KeyName = key;
                        var scope;
                        if (Array.isArray(auth.scopes)) {
                            // 1.2 support
                            var i;
                            for (i = 0; i < auth.scopes.length; i++) {
                                scopes.push(auth.scopes[i]);
                            }
                        }
                        else {
                            // 2.0 support
                            for (scope in auth.scopes) {
                                scopes.push({ scope: scope, description: auth.scopes[scope] });
                            }
                        }
                    }
                }
            }

            if (window.swaggerUi.api
              && window.swaggerUi.api.info) {
                appName = window.swaggerUi.api.info.title;
            }

            $('.api-popup-dialog').remove();
            popupDialog = $(
              [
                '<div class="api-popup-dialog">',
                '<div class="api-popup-title">Select OAuth2.0 Scopes</div>',
                '<div class="api-popup-content">',
                  '<p>Scopes are used to grant an application different levels of access to data on behalf of the end user. Each API may declare one or more scopes.',
                    '<a href="#">Learn how to use</a>',
                  '</p>',
                  '<p><strong>' + appName + '</strong> API requires the following scopes. Select which ones you want to grant to Swagger UI.</p>',
                  '<ul class="api-popup-scopes">',
                  '</ul>',
                  '<p class="error-msg"></p>',
                  '<div class="api-popup-actions"><button class="api-popup-authbtn api-button green" type="button">Authorize</button><button class="api-popup-cancel api-button gray" type="button">Cancel</button></div>',
                '</div>',
                '</div>'].join(''));
            $(document.body).append(popupDialog);

            popup = popupDialog.find('ul.api-popup-scopes').empty();
            for (i = 0; i < scopes.length; i++) {
                scope = scopes[i];
                str = '<li><input type="checkbox" id="scope_' + i + '" scope="' + scope.scope + '"/>' + '<label for="scope_' + i + '">' + scope.scope;
                if (scope.description) {
                    str += '<br/><span class="api-scope-desc">' + scope.description + '</span>';
                }
                str += '</label></li>';
                popup.append(str);
            }

            var $win = $(window),
              dw = $win.width(),
              dh = $win.height(),
              st = $win.scrollTop(),
              dlgWd = popupDialog.outerWidth(),
              dlgHt = popupDialog.outerHeight(),
              top = (dh - dlgHt) / 2 + st,
              left = (dw - dlgWd) / 2;

            popupDialog.css({
                top: (top < 0 ? 0 : top) + 'px',
                left: (left < 0 ? 0 : left) + 'px'
            });

            popupDialog.find('button.api-popup-cancel').click(function () {
                popupMask.hide();
                popupDialog.hide();
                popupDialog.empty();
                popupDialog = [];
            });

            $('button.api-popup-authbtn').unbind();
            popupDialog.find('button.api-popup-authbtn').click(function () {
                popupMask.hide();
                popupDialog.hide();

                var authSchemes = window.swaggerUi.api.authSchemes;
                var host = window.location;
                var pathname = location.pathname.substring(0, location.pathname.lastIndexOf("/"));
                var defaultRedirectUrl = host.protocol + '//' + host.host + pathname + '/o2c.html';
                var redirectUrl = window.oAuthRedirectUrl || defaultRedirectUrl;
                var url = null;

                for (var key in authSchemes) {
                    if (authSchemes.hasOwnProperty(key)) {
                        var flow = authSchemes[key].flow;

                        if (authSchemes[key].type === 'oauth2' && flow && (flow === 'implicit' || flow === 'accessCode')) {
                            var dets = authSchemes[key];
                            url = dets.authorizationUrl + '?response_type=' + (flow === 'implicit' ? 'token id_token' : 'code');
                            window.swaggerUi.tokenName = dets.tokenName || 'access_token';
                            window.swaggerUi.tokenUrl = (flow === 'accessCode' ? dets.tokenUrl : null);
                        }
                        else if (authSchemes[key].grantTypes) {
                            // 1.2 support
                            var o = authSchemes[key].grantTypes;
                            for (var t in o) {
                                if (o.hasOwnProperty(t) && t === 'implicit') {
                                    var dets = o[t];
                                    var ep = dets.loginEndpoint.url;
                                    url = dets.loginEndpoint.url + '?response_type=token id_token';
                                    window.swaggerUi.tokenName = dets.tokenName;
                                }
                                else if (o.hasOwnProperty(t) && t === 'accessCode') {
                                    var dets = o[t];
                                    var ep = dets.tokenRequestEndpoint.url;
                                    url = dets.tokenRequestEndpoint.url + '?response_type=code';
                                    window.swaggerUi.tokenName = dets.tokenName;
                                }
                            }
                        }
                    }
                }
                var scopes = []
                var o = $('.api-popup-scopes').find('input:checked');

                for (k = 0; k < o.length; k++) {
                    var scope = $(o[k]).attr('scope');

                    if (scopes.indexOf(scope) === -1)
                        scopes.push(scope);
                }

                // Implicit auth recommends a state parameter.
                var state = Math.random();

                window.enabledScopes = scopes;

                redirect_uri = redirectUrl;

                url += '&redirect_uri=' + encodeURIComponent(redirectUrl);
                url += '&realm=' + encodeURIComponent(realm);
                url += '&client_id=' + encodeURIComponent(clientId);
                url += '&scope=' + encodeURIComponent(scopes.join(scopeSeparator));
                url += '&state=' + encodeURIComponent(state);
                url += '&nonce=nonce';

                window.open(url);
            });

            popupMask.show();
            popupDialog.show();
            return;
        }

        function handleLogout() {
            for (key in window.swaggerUi.api.clientAuthorizations.authz) {
                window.swaggerUi.api.clientAuthorizations.remove(key)
            }
            window.enabledScopes = null;
            $('.api-ic.ic-on').addClass('ic-off');
            $('.api-ic.ic-on').removeClass('ic-on');

            // set the info box
            $('.api-ic.ic-warning').addClass('ic-error');
            $('.api-ic.ic-warning').removeClass('ic-warning');
        }

        function initOAuth(opts) {
            var o = (opts || {});
            var errors = [];

            appName = (o.appName || errors.push('missing appName'));
            popupMask = (o.popupMask || $('#api-common-mask'));
            popupDialog = (o.popupDialog || $('.api-popup-dialog'));
            clientId = (o.clientId || errors.push('missing client id'));
            clientSecret = (o.clientSecret || errors.push('missing client secret'));
            realm = (o.realm || errors.push('missing realm'));
            scopeSeparator = (o.scopeSeparator || ' ');

            if (errors.length > 0) {
                log('auth unable initialize oauth: ' + errors);
                return;
            }

            $('pre code').each(function (i, e) { hljs.highlightBlock(e) });
            $('.api-ic').unbind();
            $('.api-ic').click(function (s) {
                if ($(s.target).hasClass('ic-off'))
                    handleLogin();
                else {
                    handleLogout();
                }
                false;
            });
        }

        window.processOAuthCode = function processOAuthCode(data) {
            var params = {
                'client_id': clientId,
                'client_secret': clientSecret,
                'code': data.code,
                'grant_type': 'authorization_code',
                'redirect_uri': redirect_uri
            }
            $.ajax(
            {
                url: window.swaggerUi.tokenUrl,
                type: "POST",
                data: params,
                success: function (data, textStatus, jqXHR) {
                    onOAuthComplete(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    onOAuthComplete("");
                }
            });
        }

        window.onOAuthComplete = function onOAuthComplete(token) {
            if (token) {
                if (token.error) {
                    var checkbox = $('input[type=checkbox],.secured')
                    checkbox.each(function (pos) {
                        checkbox[pos].checked = false;
                    });
                    alert(token.error);
                }
                else {
                    var b = token[window.swaggerUi.tokenName];
                    if (b) {
                        // if all roles are satisfied
                        var o = null;
                        $.each($('.auth .api-ic .api_information_panel'), function (k, v) {
                            var children = v;
                            if (children && children.childNodes) {
                                var requiredScopes = [];
                                $.each((children.childNodes), function (k1, v1) {
                                    var inner = v1.innerHTML;
                                    if (inner)
                                        requiredScopes.push(inner);
                                });
                                var diff = [];
                                for (var i = 0; i < requiredScopes.length; i++) {
                                    var s = requiredScopes[i];
                                    if (window.enabledScopes && window.enabledScopes.indexOf(s) == -1) {
                                        diff.push(s);
                                    }
                                }
                                if (diff.length > 0) {
                                    o = v.parentNode.parentNode;
                                    $(o.parentNode).find('.api-ic.ic-on').addClass('ic-off');
                                    $(o.parentNode).find('.api-ic.ic-on').removeClass('ic-on');

                                    // sorry, not all scopes are satisfied
                                    $(o).find('.api-ic').addClass('ic-warning');
                                    $(o).find('.api-ic').removeClass('ic-error');
                                }
                                else {
                                    o = v.parentNode.parentNode;
                                    $(o.parentNode).find('.api-ic.ic-off').addClass('ic-on');
                                    $(o.parentNode).find('.api-ic.ic-off').removeClass('ic-off');

                                    // all scopes are satisfied
                                    $(o).find('.api-ic').addClass('ic-info');
                                    $(o).find('.api-ic').removeClass('ic-warning');
                                    $(o).find('.api-ic').removeClass('ic-error');
                                }
                            }
                        });
                        window.swaggerUi.api.clientAuthorizations.add(oauth2KeyName, new SwaggerClient.ApiKeyAuthorization('Authorization', 'Bearer ' + b, 'header'));
                    }
                }
            }
        }
    </script>

    <!-- Some basic translations -->
    <!-- <script src='lang/translator.js' type='text/javascript'></script> -->
    <!-- <script src='lang/ru.js' type='text/javascript'></script> -->
    <!-- <script src='lang/en.js' type='text/javascript'></script> -->

    <script type="text/javascript">
        $(function () {
          var url = window.location.search.match(/url=([^&]+)/);
          if (url && url.length > 1) {
            url = decodeURIComponent(url[1]);
          } else {
            url = "@Model.Last().Value";
          }

          // Pre load translate...
          if(window.SwaggerTranslator) {
            window.SwaggerTranslator.translate();
          }
          window.swaggerUi = new SwaggerUi({
            url: url,
            dom_id: "swagger-ui-container",
            supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'],
            onComplete: function(swaggerApi, swaggerUi){
              if(typeof initOAuth == "function") {
                initOAuth({
                  clientId: "SimpleIdentityServerWebSiteApi",
                  clientSecret: "SimpleIdentityServerWebSiteApi",
                  realm: "your-realms",
                  appName: "your-app-name",
                  scopeSeparator: " ",
                  additionalQueryStringParams: {}
                });
              }

              if(window.SwaggerTranslator) {
                window.SwaggerTranslator.translate();
              }

              $('pre code').each(function(i, e) {
                hljs.highlightBlock(e)
              });

              addApiKeyAuthorization();
            },
            onFailure: function(data) {
              log("Unable to Load SwaggerUI");
            },
            docExpansion: "list",
            jsonEditor: false,
            apisSorter: "alpha",
            defaultModelRendering: 'schema',
            showRequestHeaders: false
          });

          function addApiKeyAuthorization(){
            var key = encodeURIComponent($('#input_apiKey')[0].value);
            if(key && key.trim() != "") {
                var apiKeyAuth = new SwaggerClient.ApiKeyAuthorization("api_key", key, "query");
                window.swaggerUi.api.clientAuthorizations.add("api_key", apiKeyAuth);
                log("added key " + key);
            }
          }

          $('#input_apiKey').change(addApiKeyAuthorization);

          // if you have an apiKey you would like to pre-populate on the page for demonstration purposes...
          /*
            var apiKey = "myApiKeyXXXX123456789";
            $('#input_apiKey').val(apiKey);
          */

          window.swaggerUi.load();

          function log() {
            if ('console' in window) {
              console.log.apply(console, arguments);
            }
          }
        });
    </script>
</head>

<body class="swagger-section">
    <div id='header'>
        <div class="swagger-ui-wrap">
            <a id="logo" href="http://swagger.io">swagger</a>
            <form id='api_selector'>
                <div class='input'>
                    <input placeholder="http://example.com/api" id="input_baseUrl" name="baseUrl" type="text" disabled="disabled" />
                </div>
                <div class='input'>
                    <input placeholder="api_key" id="input_apiKey" name="apiKey" type="text" />
                </div>
                <div class='input'>
                    <select id="select_version">
                        @foreach (var entry in Model.Reverse())
                        {
                            <option value="@entry.Value">@entry.Key Docs</option>
                        }
                    </select>
                    <script type="text/javascript">
            $('#select_version').change(function () {
                $('#input_baseUrl').val($(this).val());
                window.swaggerUi.headerView.showCustom();
            });
                    </script>
                    <style>
                        #select_version {
                            border: none;
                            -moz-border-radius: 4px;
                            -webkit-border-radius: 4px;
                            -o-border-radius: 4px;
                            -ms-border-radius: 4px;
                            -khtml-border-radius: 4px;
                            border-radius: 4px;
                            padding: 6px 8px;
                            color: white;
                            background-color: #547f00;
                            font-size: 0.7em;
                        }
                    </style>
                </div>
            </form>
        </div>
    </div>

    <div id="message-bar" class="swagger-ui-wrap" data-sw-translate>&nbsp;</div>
    <div id="swagger-ui-container" class="swagger-ui-wrap"></div>
</body>
</html>